/* C program for Merge Sort */
#include <stdio.h>
#include <stdlib.h>

// We divide the input array into 2 different array
void merge(int arr[], int left, int middle, int right)
{
    int i, j, k; // i is the index of the left array, j is the index of the right array, k is the index of the final array
    int n1 = middle - left + 1; //length of the left array
    int n2 = right - middle;  //length of the right array

    /* create temp arrays */
    int L[n1], R[n2];

    /* Copy data to temp arrays L[] and R[] */
    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[middle + 1 + j];

    i = 0; // index of left array
    j = 0; // index of the right array
    k = left; // index of the final array
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j]) //if the value in the left array smaller than the one in the right array
        {
            arr[k] = L[i]; //the value in the final value will be the smaller one (value in the left array)
            i++;
        }
        else //in other case
        {
            arr[k] = R[j]; //the value in the final value will be the value in the right array
            j++;
        }
        k++;
    }

    /* Copy the remaining elements of L[], if there
    are any */
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }

    /* Copy the remaining elements of R[], if there
    are any */
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

/* l is for left index and r is right index of the
sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for
        // large l and h
        int m = l + (r - l) / 2; //formula to calculate the middle point

        // Sort first and second halves
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

/* UTILITY FUNCTIONS */
/* Function to print an array */
void printArray(int A[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}

/* Driver code */
int main()
{
    int arr[] = { 12, 11, 13, 5, 6, 7 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Given array is \n");
    printArray(arr, arr_size);

    mergeSort(arr, 0, arr_size - 1);

    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}


